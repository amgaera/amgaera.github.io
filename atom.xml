<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Crafty Bytes]]></title>
  <link href="http://amgaera.github.io/atom.xml" rel="self"/>
  <link href="http://amgaera.github.io/"/>
  <updated>2014-04-11T16:39:38+02:00</updated>
  <id>http://amgaera.github.io/</id>
  <author>
    <name><![CDATA[Amgaera]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cross-Compiling for Raspberry Pi Using CMake on Linux]]></title>
    <link href="http://amgaera.github.io/blog/2014/04/10/cross-compiling-for-raspberry-pi-on-64-bit-linux/"/>
    <updated>2014-04-10T17:39:41+02:00</updated>
    <id>http://amgaera.github.io/blog/2014/04/10/cross-compiling-for-raspberry-pi-on-64-bit-linux</id>
    <content type="html"><![CDATA[<p>Raspberry Pi is a great device with a (relatively) powerful GPU, but due
to its low-end CPU compiling C/C++ applications on the machine takes too
long to be feasible for anything but the simplest programs. Luckily,
setting up a cross-compiling toolchain that produces binaries compatible
with Raspberry Pi is a rather straightforward affair on Linux.</p>

<!-- more -->


<p>Although the following instructions assume a 64-bit Linux distribution,
it should be easy to adapt them to a 32-bit version. If you don&rsquo;t use
CMake, you can skip the <em>CMake Setup</em> section.</p>

<h2>Toolchain Setup</h2>

<p>First of all, create a new directory where the toolchain and other files
required for cross-compilation will be stored:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ~/rpi
</span><span class='line'>cd ~/rpi</span></code></pre></td></tr></table></div></figure>


<p>The Raspberry Pi foundation maintains a repository with tools for
cross-compilation. Let&rsquo;s clone it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/raspberrypi/tools.git</span></code></pre></td></tr></table></div></figure>


<p>The toolchain we&rsquo;re going to use is located in
<code>tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/</code>.</p>

<p>At this stage it would be possible to compile some simple programs, but
any useful application will need access to headers and libraries from
the target system. They can be copied from an SD card containing
Raspbian <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p rootfs/opt
</span><span class='line'>cp /run/media/amgaera/root/lib/ rootfs/ -rv
</span><span class='line'>cp /run/media/amgaera/root/usr/ rootfs/ -rv
</span><span class='line'>cp /run/media/amgaera/root/opt/vc rootfs/opt/ -rv
</span></code></pre></td></tr></table></div></figure>


<h2>CMake Setup</h2>

<p>CMake is a build system that&rsquo;s very popular among C/C++ developers and
has good support for cross-compilation. The recommended way to configure
it to cross-compile for a specific platform is to provide it with
a toolchain file. Let&rsquo;s create such a file for the toolchain we
downloaded:</p>

<figure class='code'><figcaption><span>Toolchain-RaspberryPi.cmake </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_SYSTEM_NAME</span> <span class="s">Linux</span><span class="p">)</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_SYSTEM_VERSION</span> <span class="s">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Specify the cross compiler</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_C_COMPILER</span> <span class="err">$</span><span class="s">ENV{HOME}/rpi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gcc</span><span class="p">)</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_CXX_COMPILER</span> <span class="err">$</span><span class="s">ENV{HOME}/rpi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-g++</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Where is the target environment</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_FIND_ROOT_PATH</span> <span class="err">$</span><span class="s">ENV{HOME}/rpi/rootfs</span><span class="p">)</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_EXE_LINKER_FLAGS</span> <span class="s2">&quot;${CMAKE_EXE_LINKER_FLAGS} --sysroot=${CMAKE_FIND_ROOT_PATH}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_SHARED_LINKER_FLAGS</span> <span class="s2">&quot;${CMAKE_SHARED_LINKER_FLAGS} --sysroot=${CMAKE_FIND_ROOT_PATH}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_MODULE_LINKER_FLAGS</span> <span class="s2">&quot;${CMAKE_MODULE_LINKER_FLAGS} --sysroot=${CMAKE_FIND_ROOT_PATH}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Search for programs only in the build host directories</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_FIND_ROOT_PATH_MODE_PROGRAM</span> <span class="s">NEVER</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Search for libraries and headers only in the target directories</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_FIND_ROOT_PATH_MODE_LIBRARY</span> <span class="s">ONLY</span><span class="p">)</span>
</span><span class='line'><span class="nb">SET</span><span class="p">(</span><span class="s">CMAKE_FIND_ROOT_PATH_MODE_INCLUDE</span> <span class="s">ONLY</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to use VideoCore IV-related libraries, you may also consider
adding the following commands to the toolchain file <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">INCLUDE_DIRECTORIES</span><span class="p">(</span><span class="err">$</span><span class="s">ENV{HOME}/rpi/rootfs/opt/vc/include</span><span class="p">)</span>
</span><span class='line'><span class="nb">INCLUDE_DIRECTORIES</span><span class="p">(</span><span class="err">$</span><span class="s">ENV{HOME}/rpi/rootfs/opt/vc/include/interface/vcos/pthreads</span><span class="p">)</span>
</span><span class='line'><span class="nb">INCLUDE_DIRECTORIES</span><span class="p">(</span><span class="err">$</span><span class="s">ENV{HOME}/rpi/rootfs/opt/vc/include/interface/vmcs_host/linux</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;re all set to start cross-compiling CMake-based projects for
Raspberry Pi. If you have such a project handy, create a new build
directory and start CMake, pointing it to the toolchain file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir build
</span><span class='line'><span class="nb">cd </span>build
</span><span class='line'>cmake -D <span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>Debug -D <span class="nv">CMAKE_TOOLCHAIN_FILE</span><span class="o">=</span><span class="nv">$HOME</span>/rpi/Toolchain-RaspberryPi.cmake path/to/your/project
</span></code></pre></td></tr></table></div></figure>


<p>Unless CMake can&rsquo;t find some libraries in the target environment, you
should end up with a Makefile and be able to compile the project using
<code>make</code>.</p>

<h2>Summary</h2>

<p>When developing for such low-power devices as Raspberry Pi,
cross-compilation is usually a must. Otherwise builds <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> take so much
time that continuous testing of code changes becomes difficult. The good
thing is that nowadays it&rsquo;s quite easy to set up a toolchain to
cross-compile for Raspberry Pi, especially if one uses Linux with CMake.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Arch Linux ARM or Pidora should work too<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Alternatively, they may be added to the <code>CMakeLists.txt</code> of each project that requires them, but because all of my projects do, I found it easier to include them in the toolchain file<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Even incremental<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
